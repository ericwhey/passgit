/* 
 * Copyright (C) 2016 Eric Hey
 *
 * This file is part of passGit.
 *
 * passGit is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * passGit is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with passGit.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.passgit.app.file.dialog;

import com.passgit.app.file.value.EncryptedByteArrayValue;
import com.passgit.app.PassGit;
import com.passgit.app.file.value.StringValue;
import com.passgit.app.file.Value;
import com.passgit.app.repository.model.PathModel;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Eric Hey
 */
public class EditFilePanel extends javax.swing.JPanel {

    private PassGit app;
    private PathModel pathModel;

    private boolean showPassword = false;
    private boolean dirty = false;

    private Map<String, Value> values;

    /**
     * Creates new form EditPassFrame
     *
     * @param app
     * @param pathModel
     * @param values
     */
    public EditFilePanel(PassGit app, PathModel pathModel, Map<String, Value> values) {
        this.app = app;
        this.pathModel = pathModel;

        initComponents();

        if (values != null) {
            load(values);
        }

        titleField.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {

            }

            @Override
            public void keyPressed(KeyEvent e) {

            }

            @Override
            public void keyReleased(KeyEvent e) {
                dirty = true;
                validateFields();
            }
        });

        urlField.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {

            }

            @Override
            public void keyPressed(KeyEvent e) {

            }

            @Override
            public void keyReleased(KeyEvent e) {
                dirty = true;
                validateFields();
            }
        });

        usernameField.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {

            }

            @Override
            public void keyPressed(KeyEvent e) {

            }

            @Override
            public void keyReleased(KeyEvent e) {
                dirty = true;
                validateFields();
            }
        });

        passwordField.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {

            }

            @Override
            public void keyPressed(KeyEvent e) {

            }

            @Override
            public void keyReleased(KeyEvent e) {
                dirty = true;
                validateFields();
            }
        });

        repeatField.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {

            }

            @Override
            public void keyPressed(KeyEvent e) {

            }

            @Override
            public void keyReleased(KeyEvent e) {
                dirty = true;
                validateFields();
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        titleField = new javax.swing.JTextField();
        urlField = new javax.swing.JTextField();
        usernameField = new javax.swing.JTextField();
        repeatField = new javax.swing.JPasswordField();
        passwordField = new javax.swing.JPasswordField();
        showButton = new javax.swing.JButton();
        generateButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Title:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(jLabel1, gridBagConstraints);

        jLabel2.setText("URL:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(jLabel2, gridBagConstraints);

        jLabel3.setText("Username:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(jLabel3, gridBagConstraints);

        jLabel4.setText("Password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(jLabel4, gridBagConstraints);

        jLabel5.setText("Repeat:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(jLabel5, gridBagConstraints);

        jLabel6.setText("Comment:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        add(jLabel6, gridBagConstraints);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 365;
        gridBagConstraints.ipady = 61;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        add(jScrollPane1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(titleField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(urlField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(usernameField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(repeatField, gridBagConstraints);

        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(passwordField, gridBagConstraints);

        showButton.setText("Show");
        showButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(showButton, gridBagConstraints);

        generateButton.setText("Generate");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        add(generateButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void showButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showButtonActionPerformed
        if (showPassword) {
            passwordField.setEchoChar('*');
            repeatField.setEchoChar('*');
            showButton.setText("Show");
            showPassword = false;
        } else {
            passwordField.setEchoChar((char) 0);
            repeatField.setEchoChar((char) 0);
            showButton.setText("Hide");
            showPassword = true;
        }
    }//GEN-LAST:event_showButtonActionPerformed

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        PasswordGeneratorPanel passwordGeneratorPanel = new PasswordGeneratorPanel();
        int generateResult = JOptionPane.showConfirmDialog(this, passwordGeneratorPanel,"Password Generator",
                        JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.PLAIN_MESSAGE);
        
        if (generateResult == JOptionPane.OK_OPTION) {
            String password = new String(passwordGeneratorPanel.getPassword());
            passwordField.setText(password);
            repeatField.setText(password);
        }
    }//GEN-LAST:event_generateButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton generateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JPasswordField repeatField;
    private javax.swing.JButton showButton;
    private javax.swing.JTextField titleField;
    private javax.swing.JTextField urlField;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables

    public void load(Map<String, Value> values) {
        //Properties properties = pathModel.getProperties();

        this.values = values;

        try {

            if (values.containsKey("title")) {
                titleField.setText(values.get("title").getString());
            }

            if (values.containsKey("url")) {
                urlField.setText(values.get("url").getString());
            }

            if (values.containsKey("username")) {
                usernameField.setText(values.get("username").getString());
            }

            if (values.containsKey("password")) {
                String password = values.get("password").getString();
                passwordField.setText(password);
                repeatField.setText(password);
            }

        } catch (Exception ex) {
            Logger.getLogger(EditFilePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void save() {

        try {

            if (!titleField.getText().equals("")) {
                if (values.containsKey("title")) {
                    values.get("title").setString(titleField.getText());
                } else {
                    values.put("title", new StringValue(titleField.getText()));
                }
            } else {
                values.remove("title");
            }

            if (!urlField.getText().equals("")) {
                if (values.containsKey("url")) {
                    values.get("url").setString(urlField.getText());
                } else {
                    values.put("url", new StringValue(urlField.getText()));
                }
            } else {
                values.remove("url");
            }

            if (!usernameField.getText().equals("")) {
                if (values.containsKey("username")) {
                    values.get("username").setString(usernameField.getText());
                } else {
                    values.put("username", new StringValue(usernameField.getText()));
                }
            } else {
                values.remove("username");
            }

            if (!passwordField.getPassword().equals("")) {
                if (values.containsKey("password")) {
                    values.get("password").setCharArray(passwordField.getPassword());
                } else {
                    values.put("password", new EncryptedByteArrayValue(app, app.getCryptographer().encrypt(PassGit.toBytes(passwordField.getPassword()))));
                }
            } else {
                values.remove("password");
            }

            app.saveFileValues(pathModel, values);

        } catch (Exception ex) {
            Logger.getLogger(EditFilePanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void validateFields() {
        if (dirty) {
            if (arraysEqual(passwordField.getPassword(), repeatField.getPassword())) {
                fireValidated(true);
            } else {
                fireValidated(false);
            }
        }
    }

    public interface Listener {

        public void onValidated(boolean valid);
    }

    private List<Listener> listeners = new ArrayList<Listener>();

    public void addListener(Listener l) {
        listeners.add(l);
    }

    public void fireValidated(boolean valid) {
        for (Listener l : listeners) {
            l.onValidated(valid);
        }
    }

    public static boolean arraysEqual(char[] array1, char[] array2) {
        if (array1.length != array2.length) {
            return false;
        }

        boolean same = true;

        for (int i = 0; i < array1.length; i++) {
            if (array1[i] != array2[i]) {
                same = false;
            }
        }

        return same;
    }

}
