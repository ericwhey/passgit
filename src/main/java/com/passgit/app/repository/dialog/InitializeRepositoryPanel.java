/* 
 * Copyright (C) 2016 Eric Hey
 *
 * This file is part of passGit.
 *
 * passGit is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * passGit is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with passGit.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.passgit.app.repository.dialog;

import com.passgit.app.PassGit;
import java.util.ServiceLoader;
import javax.swing.DefaultComboBoxModel;
import com.passgit.app.file.Format;
import com.passgit.app.repository.Cryptography;

/**
 *
 * @author Eric Hey
 */
public class InitializeRepositoryPanel extends javax.swing.JPanel {

    private DefaultComboBoxModel cryptographerComboModel;
    
    /**
     * Creates new form NewRepositoryPanel
     * @param app
     */
    public InitializeRepositoryPanel(PassGit app) {
        initComponents();
        
        DefaultComboBoxModel fileFormatComboModel = new DefaultComboBoxModel();
        
        for (Format fileFormat : app.getFileFormatLoader()) {
            fileFormatComboModel.addElement(fileFormat);
        }
        
        fileFormatCombo.setModel(fileFormatComboModel);
        
        cryptographerComboModel = new DefaultComboBoxModel();
        
        for (Cryptography cryptographer : app.getCryptographerLoader()) {
            cryptographerComboModel.addElement(cryptographer);
        }
        
        cryptographerCombo.setModel(cryptographerComboModel);
    }
    
    public Format getFileFormat() {
        return (Format)fileFormatCombo.getSelectedItem();
    }
    
    public Cryptography getCryptographer() {
        return (Cryptography)cryptographerCombo.getSelectedItem();
    }
    
    public boolean getInit() {
        return initCheckbox.isSelected();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        fileFormatCombo = new javax.swing.JComboBox<>();
        cryptographerCombo = new javax.swing.JComboBox<>();
        initCheckbox = new javax.swing.JCheckBox();

        jLabel1.setText("Format:");

        jLabel2.setText("Cryptography:");

        fileFormatCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Encrypted Properties Files" }));
        fileFormatCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileFormatComboActionPerformed(evt);
            }
        });

        cryptographerCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "128-bit AES" }));

        initCheckbox.setSelected(true);
        initCheckbox.setText("Initialize GIT Repository");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(47, 47, 47)
                        .addComponent(fileFormatCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cryptographerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(initCheckbox)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fileFormatCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(cryptographerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(initCheckbox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fileFormatComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileFormatComboActionPerformed
        String suggestedClass = getFileFormat().getSuggestedCryptographer().getClass().getName();
        for (int i=0; i<cryptographerComboModel.getSize(); i++) {
            String comboClass =  cryptographerComboModel.getElementAt(i).getClass().getName();
            
            if (suggestedClass.equals(comboClass)) {
                cryptographerCombo.setSelectedIndex(i);
            }
        }
    }//GEN-LAST:event_fileFormatComboActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cryptographerCombo;
    private javax.swing.JComboBox<String> fileFormatCombo;
    private javax.swing.JCheckBox initCheckbox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
