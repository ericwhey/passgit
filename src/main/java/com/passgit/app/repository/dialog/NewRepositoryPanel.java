/*
 * Copyright (C) 2016 Eric Hey
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.passgit.app.repository.dialog;

import com.passgit.app.PassGit;
import com.passgit.app.file.Format;
import com.passgit.app.file.dialog.PasswordGeneratorPanel;
import com.passgit.app.repository.Cryptography;
import java.io.File;
import java.nio.file.Path;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Eric Hey
 */
public class NewRepositoryPanel extends javax.swing.JPanel {

    private final DefaultComboBoxModel cryptographerComboModel;

    /**
     * Creates new form NewRepositoryPanel
     */
    public NewRepositoryPanel(PassGit app) {
        initComponents();
        
        DefaultComboBoxModel fileFormatComboModel = new DefaultComboBoxModel();
        
        for (Format fileFormat : app.getFileFormatLoader()) {
            fileFormatComboModel.addElement(fileFormat);
        }
        
        fileFormatCombo.setModel(fileFormatComboModel);
        
        cryptographerComboModel = new DefaultComboBoxModel();
        
        for (Cryptography cryptographer : app.getCryptographerLoader()) {
            cryptographerComboModel.addElement(cryptographer);
        }
        
        cryptographerCombo.setModel(cryptographerComboModel);
    }
    
    public Path getRepository() {
        return new File(repositoryField.getText()).toPath();
    }
    
    public char[] getPassword() {
        return passwordField.getPassword();
    }
    
    public File getKeyFile() {
        if (!keyFileField.getText().equals("")) {
            return new File(keyFileField.getText());
        } 
            
        return null;
    }
    
    public Format getFileFormat() {
        return (Format)fileFormatCombo.getSelectedItem();
    }
    
    public Cryptography getCryptographer() {
        return (Cryptography)cryptographerCombo.getSelectedItem();
    }
    
    public boolean getInit() {
        return initCheckbox.isSelected();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        repositoryField = new javax.swing.JTextField();
        chooseRepositoryButton = new javax.swing.JButton();
        keyFileField = new javax.swing.JTextField();
        chooseKeyFileButton = new javax.swing.JButton();
        createKeyFileButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        initCheckbox = new javax.swing.JCheckBox();
        fileFormatCombo = new javax.swing.JComboBox<>();
        cryptographerCombo = new javax.swing.JComboBox<>();
        passwordField = new javax.swing.JPasswordField();

        jLabel1.setText("Repository:");

        jLabel2.setText("Password:");

        jLabel3.setText("Key File:");

        chooseRepositoryButton.setText("Choose...");
        chooseRepositoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseRepositoryButtonActionPerformed(evt);
            }
        });

        keyFileField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyFileFieldActionPerformed(evt);
            }
        });

        chooseKeyFileButton.setText("Choose...");
        chooseKeyFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseKeyFileButtonActionPerformed(evt);
            }
        });

        createKeyFileButton.setText("Create");
        createKeyFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createKeyFileButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Format:");

        jLabel5.setText("Encryption:");

        initCheckbox.setSelected(true);
        initCheckbox.setText("Initialize GIT Repository");
        initCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initCheckboxActionPerformed(evt);
            }
        });

        fileFormatCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Encrypted Properties Files" }));

        cryptographerCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "128-bit AES" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(initCheckbox)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(keyFileField)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(chooseKeyFileButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(createKeyFileButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(fileFormatCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(repositoryField, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(chooseRepositoryButton)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(cryptographerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(repositoryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseRepositoryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(keyFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseKeyFileButton)
                    .addComponent(createKeyFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(fileFormatCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cryptographerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(initCheckbox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_initCheckboxActionPerformed

    private void chooseRepositoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseRepositoryButtonActionPerformed
        ///Create a file chooser
        final JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setCurrentDirectory(new File(repositoryField.getText()));

        //In response to a button click:
        int returnVal = fc.showOpenDialog(this);
        
        File currentDirectory = fc.getCurrentDirectory();
        
        repositoryField.setText(currentDirectory.toPath().toString());
    }//GEN-LAST:event_chooseRepositoryButtonActionPerformed

    private void keyFileFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyFileFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keyFileFieldActionPerformed

    private void chooseKeyFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseKeyFileButtonActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setCurrentDirectory(new File(repositoryField.getText()));

        //In response to a button click:
        int returnVal = fc.showOpenDialog(this);
        
        File currentFile = fc.getSelectedFile();
        
        keyFileField.setText(currentFile.toPath().toString());
    }//GEN-LAST:event_chooseKeyFileButtonActionPerformed

    private void createKeyFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createKeyFileButtonActionPerformed
        KeyFileGeneratorPanel keyFileGeneratorPanel = new KeyFileGeneratorPanel();
        int generateResult = JOptionPane.showConfirmDialog(this, keyFileGeneratorPanel,"Key File Generator",
                        JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.PLAIN_MESSAGE);
        
        if (generateResult == JOptionPane.OK_OPTION) {
            keyFileField.setText(keyFileGeneratorPanel.getKeyFile());
        }
    }//GEN-LAST:event_createKeyFileButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseKeyFileButton;
    private javax.swing.JButton chooseRepositoryButton;
    private javax.swing.JButton createKeyFileButton;
    private javax.swing.JComboBox<String> cryptographerCombo;
    private javax.swing.JComboBox<String> fileFormatCombo;
    private javax.swing.JCheckBox initCheckbox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField keyFileField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField repositoryField;
    // End of variables declaration//GEN-END:variables
}
